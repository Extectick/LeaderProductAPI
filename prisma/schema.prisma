generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProfileStatus {
  PENDING
  ACTIVE
  BLOCKED
}


model ClientProfile {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  addressId Int?
  address   Address? @relation(fields: [addressId], references: [id])
  phone     String?
  status    ProfileStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SupplierProfile {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  addressId Int?
  address   Address? @relation(fields: [addressId], references: [id])
  phone     String?
  status    ProfileStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmployeeProfile {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  departmentId Int?
  department Department? @relation(fields: [departmentId], references: [id])
  departmentRoles DepartmentRole[] @relation("EmployeeDepartmentRoles")
  phone     String?
  status    ProfileStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Department {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  departmentRoles DepartmentRole[]
  employeeProfiles EmployeeProfile[]  // Добавлено обратное отношение
}




enum ProfileType {
  CLIENT
  SUPPLIER
  EMPLOYEE
}

model User {
  id                 Int                 @id @default(autoincrement())
  email              String              @unique
  passwordHash       String
  isActive           Boolean             @default(false)
  roleId             Int 
  firstName          String?             // Имя
  lastName           String?             // Фамилия
  middleName         String?             // Отчество
  phone              String?             // Телефон пользователя
  avatarUrl          String?             // Ссылка на аватар пользователя
  deletedAt          DateTime?           // Для soft delete
  currentProfileType ProfileType?        // Текущий активный профиль
  emailVerifications EmailVerification[]
  loginAttempts      LoginAttempt[]
  passwordResets     PasswordReset[]
  refreshTokens      RefreshToken[]
  role               Role                @relation(fields: [roleId], references: [id])
  departmentRoles    DepartmentRole[]
  auditLogs          AuditLog[]          @relation("UserAuditLogs")
  clientProfile      ClientProfile?
  supplierProfile    SupplierProfile?
  employeeProfile    EmployeeProfile?
  profileStatus      ProfileStatus       @default(PENDING)

  qrlist             QRList[]

  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  @@index([email])
}



model DepartmentRole {
  id           Int       @id @default(autoincrement())
  userId       Int
  roleId       Int
  departmentId Int

  user       User       @relation(fields: [userId], references: [id])
  role       Role       @relation(fields: [roleId], references: [id])
  department Department @relation(fields: [departmentId], references: [id])

  employeeProfiles EmployeeProfile[] @relation("EmployeeDepartmentRoles") // Добавлено обратное отношение

  @@unique([userId, roleId, departmentId])
}


model Address {
  id        Int      @id @default(autoincrement())
  street    String
  city      String
  state     String?
  postalCode String?
  country   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  clientProfiles   ClientProfile[]
  supplierProfiles SupplierProfile[]
}



model Role {
  id            Int               @id @default(autoincrement())
  name          String            @unique
  permissions   RolePermissions[] @relation("RolePermissions")
  users         User[]
  departmentRoles DepartmentRole[]

  parentRoleId  Int?              // Родительская роль для иерархии ролей
  parentRole    Role?             @relation("RoleHierarchy", fields: [parentRoleId], references: [id])
  childRoles    Role[]            @relation("RoleHierarchy")
}

model Permission {
  id    Int               @id @default(autoincrement())
  name  String            @unique
  roles RolePermissions[] @relation("RolePermissions")
}

model RolePermissions {
  roleId       Int
  permissionId Int
  permission   Permission @relation("RolePermissions", fields: [permissionId], references: [id])
  role         Role       @relation("RolePermissions", fields: [roleId], references: [id])

  @@id([roleId, permissionId])
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
  revoked   Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
}

model LoginAttempt {
  id        Int      @id @default(autoincrement())
  userId    Int
  success   Boolean
  ip        String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model EmailVerification {
  id           Int      @id @default(autoincrement())
  userId       Int
  code         String
  expiresAt    DateTime
  used         Boolean  @default(false)
  attemptsCount Int      @default(0)
  lastSentAt   DateTime?
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id])
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  userId    Int
  code      String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}


enum ActionType {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  PASSWORD_RESET
  EMAIL_VERIFICATION
  OTHER
}

model AuditLog {
  id         Int        @id @default(autoincrement())
  userId     Int?
  action     ActionType
  targetType String?
  targetId   Int?
  timestamp  DateTime   @default(now())
  details    String?

  user       User?      @relation("UserAuditLogs", fields: [userId], references: [id])
}

enum QRStatus {
  ACTIVE
  PAUSED
  DELETED
}

model QRList {
  id          String      @id
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  status      QRStatus    @default(ACTIVE)
  createdBy   User        @relation(fields: [createdById], references: [id])
  createdById Int
  qrData      String
  description String?
  analytics   QRAnalytic[]
}

model QRAnalytic {
  id           Int       @id @default(autoincrement())
  ip           String?
  location     String?
  browser      String?
  device       String?
  scanDuration Int?      // Время в миллисекундах
  createdAt    DateTime  @default(now())
  qrList       QRList    @relation(fields: [qrListId], references: [id])
  qrListId     String
}