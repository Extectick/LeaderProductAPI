generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                 @id @default(autoincrement())
  email              String              @unique
  passwordHash       String
  isActive           Boolean             @default(false)
  roleId             Int
  departmentId       Int? // Связь с отделом, может быть null
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  emailVerifications EmailVerification[]
  loginAttempts      LoginAttempt[]
  passwordResets     PasswordReset[]
  refreshTokens      RefreshToken[]
  role               Role                @relation(fields: [roleId], references: [id])
  department         Department?         @relation(fields: [departmentId], references: [id])
  departmentRoles    DepartmentRole[]
  auditLogs          AuditLog[]          @relation("UserAuditLogs")
}

model Role {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  permissions     RolePermissions[] @relation("RolePermissions")
  users           User[]
  departmentRoles DepartmentRole[]

  parentRoleId Int? // Родительская роль для иерархии ролей
  parentRole   Role?  @relation("RoleHierarchy", fields: [parentRoleId], references: [id])
  childRoles   Role[] @relation("RoleHierarchy")
}

model Permission {
  id    Int               @id @default(autoincrement())
  name  String            @unique
  roles RolePermissions[] @relation("RolePermissions")
}

model RolePermissions {
  roleId       Int
  permissionId Int
  permission   Permission @relation("RolePermissions", fields: [permissionId], references: [id])
  role         Role       @relation("RolePermissions", fields: [roleId], references: [id])

  @@id([roleId, permissionId])
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
  revoked   Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
}

model LoginAttempt {
  id        Int      @id @default(autoincrement())
  userId    Int
  success   Boolean
  ip        String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model EmailVerification {
  id            Int       @id @default(autoincrement())
  userId        Int
  code          String
  expiresAt     DateTime
  used          Boolean   @default(false)
  attemptsCount Int       @default(0)
  lastSentAt    DateTime?
  createdAt     DateTime  @default(now())
  user          User      @relation(fields: [userId], references: [id])
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  userId    Int
  code      String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model AuditLog {
  id         Int      @id @default(autoincrement())
  userId     Int?
  action     String
  targetType String?
  targetId   Int?
  timestamp  DateTime @default(now())
  details    String?

  user User? @relation("UserAuditLogs", fields: [userId], references: [id])
}

model Department {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  users           User[]
  departmentRoles DepartmentRole[]
}

model DepartmentRole {
  id           Int @id @default(autoincrement())
  userId       Int
  roleId       Int
  departmentId Int

  user       User       @relation(fields: [userId], references: [id])
  role       Role       @relation(fields: [roleId], references: [id])
  department Department @relation(fields: [departmentId], references: [id])

  @@unique([userId, roleId, departmentId])
}
