
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.1
 * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
 */
Prisma.prismaVersion = {
  client: "6.11.1",
  engine: "f40f79ec31188888a2e33acda0ecc8fd10a853a9"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ClientProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  addressId: 'addressId',
  phone: 'phone',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SupplierProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  addressId: 'addressId',
  phone: 'phone',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmployeeProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  departmentId: 'departmentId',
  phone: 'phone',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DepartmentScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  passwordHash: 'passwordHash',
  isActive: 'isActive',
  roleId: 'roleId',
  firstName: 'firstName',
  lastName: 'lastName',
  middleName: 'middleName',
  phone: 'phone',
  avatarUrl: 'avatarUrl',
  deletedAt: 'deletedAt',
  currentProfileType: 'currentProfileType',
  profileStatus: 'profileStatus',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DepartmentRoleScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  roleId: 'roleId',
  departmentId: 'departmentId'
};

exports.Prisma.AddressScalarFieldEnum = {
  id: 'id',
  street: 'street',
  city: 'city',
  state: 'state',
  postalCode: 'postalCode',
  country: 'country',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  parentRoleId: 'parentRoleId'
};

exports.Prisma.PermissionScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.RolePermissionsScalarFieldEnum = {
  roleId: 'roleId',
  permissionId: 'permissionId'
};

exports.Prisma.RefreshTokenScalarFieldEnum = {
  id: 'id',
  token: 'token',
  userId: 'userId',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  revoked: 'revoked'
};

exports.Prisma.LoginAttemptScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  success: 'success',
  ip: 'ip',
  createdAt: 'createdAt'
};

exports.Prisma.EmailVerificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  code: 'code',
  expiresAt: 'expiresAt',
  used: 'used',
  attemptsCount: 'attemptsCount',
  lastSentAt: 'lastSentAt',
  createdAt: 'createdAt'
};

exports.Prisma.PasswordResetScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  code: 'code',
  expiresAt: 'expiresAt',
  used: 'used',
  createdAt: 'createdAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  targetType: 'targetType',
  targetId: 'targetId',
  timestamp: 'timestamp',
  details: 'details'
};

exports.Prisma.QRListScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  status: 'status',
  createdById: 'createdById',
  qrData: 'qrData',
  qrType: 'qrType',
  description: 'description'
};

exports.Prisma.QRAnalyticScalarFieldEnum = {
  id: 'id',
  ip: 'ip',
  location: 'location',
  browser: 'browser',
  device: 'device',
  scanDuration: 'scanDuration',
  createdAt: 'createdAt',
  qrListId: 'qrListId'
};

exports.Prisma.AppealScalarFieldEnum = {
  id: 'id',
  number: 'number',
  fromDepartmentId: 'fromDepartmentId',
  toDepartmentId: 'toDepartmentId',
  createdById: 'createdById',
  status: 'status',
  priority: 'priority',
  deadline: 'deadline',
  title: 'title',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AppealAssigneeScalarFieldEnum = {
  id: 'id',
  appealId: 'appealId',
  userId: 'userId'
};

exports.Prisma.AppealWatcherScalarFieldEnum = {
  id: 'id',
  appealId: 'appealId',
  userId: 'userId'
};

exports.Prisma.AppealStatusHistoryScalarFieldEnum = {
  id: 'id',
  appealId: 'appealId',
  oldStatus: 'oldStatus',
  newStatus: 'newStatus',
  changedById: 'changedById',
  changedAt: 'changedAt'
};

exports.Prisma.AppealMessageScalarFieldEnum = {
  id: 'id',
  appealId: 'appealId',
  senderId: 'senderId',
  text: 'text',
  editedAt: 'editedAt',
  deleted: 'deleted',
  createdAt: 'createdAt'
};

exports.Prisma.AppealAttachmentScalarFieldEnum = {
  id: 'id',
  messageId: 'messageId',
  fileUrl: 'fileUrl',
  fileName: 'fileName',
  fileType: 'fileType',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.ProfileStatus = exports.$Enums.ProfileStatus = {
  PENDING: 'PENDING',
  ACTIVE: 'ACTIVE',
  BLOCKED: 'BLOCKED'
};

exports.ProfileType = exports.$Enums.ProfileType = {
  CLIENT: 'CLIENT',
  SUPPLIER: 'SUPPLIER',
  EMPLOYEE: 'EMPLOYEE'
};

exports.ActionType = exports.$Enums.ActionType = {
  CREATE: 'CREATE',
  UPDATE: 'UPDATE',
  DELETE: 'DELETE',
  LOGIN: 'LOGIN',
  LOGOUT: 'LOGOUT',
  PASSWORD_RESET: 'PASSWORD_RESET',
  EMAIL_VERIFICATION: 'EMAIL_VERIFICATION',
  OTHER: 'OTHER'
};

exports.QRStatus = exports.$Enums.QRStatus = {
  ACTIVE: 'ACTIVE',
  PAUSED: 'PAUSED',
  DELETED: 'DELETED'
};

exports.QRType = exports.$Enums.QRType = {
  PHONE: 'PHONE',
  LINK: 'LINK',
  EMAIL: 'EMAIL',
  TEXT: 'TEXT',
  WHATSAPP: 'WHATSAPP',
  CONTACT: 'CONTACT',
  TELEGRAM: 'TELEGRAM'
};

exports.AppealStatus = exports.$Enums.AppealStatus = {
  OPEN: 'OPEN',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  DECLINED: 'DECLINED'
};

exports.AppealPriority = exports.$Enums.AppealPriority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

exports.AttachmentType = exports.$Enums.AttachmentType = {
  IMAGE: 'IMAGE',
  AUDIO: 'AUDIO',
  FILE: 'FILE'
};

exports.Prisma.ModelName = {
  ClientProfile: 'ClientProfile',
  SupplierProfile: 'SupplierProfile',
  EmployeeProfile: 'EmployeeProfile',
  Department: 'Department',
  User: 'User',
  DepartmentRole: 'DepartmentRole',
  Address: 'Address',
  Role: 'Role',
  Permission: 'Permission',
  RolePermissions: 'RolePermissions',
  RefreshToken: 'RefreshToken',
  LoginAttempt: 'LoginAttempt',
  EmailVerification: 'EmailVerification',
  PasswordReset: 'PasswordReset',
  AuditLog: 'AuditLog',
  QRList: 'QRList',
  QRAnalytic: 'QRAnalytic',
  Appeal: 'Appeal',
  AppealAssignee: 'AppealAssignee',
  AppealWatcher: 'AppealWatcher',
  AppealStatusHistory: 'AppealStatusHistory',
  AppealMessage: 'AppealMessage',
  AppealAttachment: 'AppealAttachment'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
